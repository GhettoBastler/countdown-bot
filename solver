#! /usr/bin/env python
# coding: utf-8

import sys
import math
import operator
import argparse


def can_sub(a, b):
    if a <= b:
        return False

    if a == 2*b:
        return False

    return True


def can_div(a, b):
    if b == 0:
        return False

    if b == 1:
        return False

    if a % b != 0:
        return False

    return True


def can_mul(a, b):
    if a == 0 or a == 1:
        return False

    if b == 0 or b == 1:
        return False

    return True


OPERATORS = {
    '+': (operator.add, None),
    '-': (operator.sub, can_sub),
    'Ã—': (operator.mul, can_mul),
    '/': (operator.floordiv, can_div),
}


def branch(state):
    numbers, stack, calculation = state
    branches = []
    if numbers:
        # Push each number in the stack
        for n in set(numbers):
            num_list = list(numbers)
            num_list.remove(n)
            new_numbers = tuple(num_list)

            new_stack = stack + (n,)
            new_calculation = calculation + (n,)
            branches.append((new_numbers, new_stack, new_calculation))

    # We can not do any operation if there are not enough numbers in the stack
    if len(stack) >= 2:
        a, b = stack[-2:]
        curr_stack = stack[:-2]

        for key in OPERATORS:
            op, check_func = OPERATORS[key]

            if check_func:
                if not check_func(a, b):
                    continue

            result = op(a, b)
            new_stack = curr_stack + (result,)
            new_calculation = calculation + (key,)
            branches.append((numbers, new_stack, new_calculation))

    return branches


def search_solution(numbers, target, fast):
    best_calc = None
    best_result = None
    best_error = math.inf

    stack = [((numbers), (), ())]

    exact_solutions = []
    while stack:
        curr_state = stack.pop()

        if len(curr_state[1]) > 0:
            curr_result = curr_state[1][-1]

            # Have we found an exact solution ?
            if curr_result == target:
                if fast:
                    return (curr_state[2], curr_result)
                else:
                    exact_solutions.append((curr_state[2], curr_result))

            # If not, we store the best result
            else:
                curr_error = abs(target - curr_result)
                if curr_error < best_error:
                    best_error = curr_error
                    best_calc = curr_state[2]
                    best_result = curr_result

        stack.extend(branch(curr_state))

    if exact_solutions:
        best_calc, best_result = min(exact_solutions, key=lambda s: len(s[0]))

    return (best_calc, best_result)


def _rpn_to_forest(rpn):
    stack = []
    for token in rpn:
        if token in OPERATORS:
            node_b = stack.pop()
            node_a = stack.pop()

            result = OPERATORS[token][0](node_a[0], node_b[0])
            node = (result, node_a, token, node_b)
            stack.append(node)

        else:
            node = (token,)
            stack.append(node)
    return stack


def _get_good_tree(forest, result):
    for tree in forest:
        if tree[0] == result:
            return tree


def tree_to_rpn(node):
    res = []
    if len(node) == 1:
        res.append(node[0])
    else:
        res.extend(tree_to_rpn(node[1]))
        res.extend(tree_to_rpn(node[3]))
        res.append(node[2])
    return res


def tree_to_infix(root):
    if len(root) == 1:
        return str(root[0])
    else:
        raw_a = tree_to_infix(root[1])
        raw_b = tree_to_infix(root[3])
        op = root[2]

        if set(raw_a) & set(OPERATORS):
            # Add parenthesis to a
            a = f'({raw_a})'
        else:
            a = raw_a

        if set(raw_b) & set(OPERATORS):
            # Add parenthesis to b
            b = f'({raw_b})'
        else:
            b = raw_b

        return f'{a} {op} {b}'


def tree_to_steps(root):
    steps = []
    queue = [root]

    while queue:
        curr_node = queue.pop()

        if len(curr_node) > 1:
            a = curr_node[1][0]
            b = curr_node[3][0]
            result = curr_node[0]
            op = curr_node[2]
            steps.insert(0, f'{a} {op} {b} = {result}')

            queue.insert(0, curr_node[3])
            queue.insert(0, curr_node[1])

    return steps


def get_parser():
    parser = argparse.ArgumentParser(
        description='Find a solution to a Countdown Number round'
    )
    parser.add_argument(
        'numbers',
        metavar='N',
        nargs=6,
        type=int,
        help='The six available numbers'
    )
    parser.add_argument(
        'target',
        metavar='TARGET',
        type=int,
        help='The target number'
    )
    parser.add_argument(
        '-m',
        '--mode',
        choices=('steps', 'infix', 'rpn'),
        default='steps',
        help='How the ouput should be displayed. Default is steps'
    )
    parser.add_argument(
        '-f',
        '--fast',
        action='store_true',
        help='Instead of searching for the shortest solution, stop at the '
             'first one'
    )
    return parser


def main():
    parser = get_parser()
    args = parser.parse_args()

    # Check if the solution is trivial
    if args.target in args.numbers:
        print(f'{args.target} is already available')
        sys.exit()

    raw_solution, result = search_solution(
        args.numbers,
        args.target,
        args.fast
    )
    forest = _rpn_to_forest(raw_solution)
    tree = _get_good_tree(forest, result)

    if result == args.target:
        print('Exact solution found:')
    else:
        error = abs(result - args.target)
        print(f'No exact solution. Closest is {result} (off by {error}):')

    if args.mode == 'rpn':
        rpn = tree_to_rpn(tree)
        str_solution = ' '.join(map(str, rpn)) + f' = {result}'
    elif args.mode == 'steps':
        str_solution = '\n'.join(tree_to_steps(tree))
    elif args.mode == 'infix':
        str_solution = tree_to_infix(tree) + f' = {result}'
    else:
        print('Unknown mode for output: {args.mode}')
        sys.exit(1)

    print(f'{str_solution}')


if __name__ == '__main__':
    main()
